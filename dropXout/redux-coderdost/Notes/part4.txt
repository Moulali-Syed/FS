Redux Toolkit with React:
========================
code in 03-redux-toolkit 

inside src folder create a folder --> slices , inside create accountSlice.js , bonusSlice.js 

we can create from following the documentation 

accountSlice.js
---------------
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  amount: 1,
};

export const accountSlice = createSlice({
  name: 'account',
  initialState,
  reducers: {
    increment: (state) => {
      state.amount += 1;
    },
    decrement: (state) => {
      state.amount -= 1;
    },
    incrementByAmount: (state, action) => {
      state.amount += action.payload;
    },
  },
});

// Action creators are generated for each case reducer function
export const { increment, decrement, incrementByAmount } = accountSlice.actions;

export default accountSlice.reducer;

bonusSlice
----------
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  points: 1,
};

export const bonusSlice = createSlice({
  name: 'bonus',
  initialState,
  reducers: {
    increment: (state) => {
      state.points += 1;
    },
  },
});

// Action creators are generated for each case reducer function
export const { increment } = bonusSlice.actions;

export default bonusSlice.reducer;

======================================================================================
Now go to index.js and initalize store 

npm install @reduxjs/toolkit react-redux

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { configureStore } from '@reduxjs/toolkit';
import accountReducer from './slices/accountSlice';
import bonusReducer from './slices/bonusSlice';
import { Provider } from 'react-redux';

const store = configureStore({
  reducer: {
    account: accountReducer,
    bonus: bonusReducer,
  },
});

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);




======================================================================================
Now start using useSelector and useDispatch 

import { useDispatch, useSelector } from 'react-redux';
import { increment } from '../slices/bonusSlice';

function Bonus() {
  const dispatch = useDispatch();
  const points = useSelector((state) => state.bonus.points);

  return (
    <div className="card">
      <div className="container">
        <h4>
          <b>Bonus Component</b>
        </h4>
        <h3>Total Point : ${points}</h3>

        <button onClick={() => dispatch(increment())}>Increment +</button>
      </div>
    </div>
  );
}

export default Bonus;
----
import { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  decrement,
  increment,
  incrementByAmount,
} from '../slices/accountSlice';

function Account() {
  const [value, setValue] = useState(0);

  const dispatch = useDispatch();
  const amount = useSelector((state) => state.account.amount);

  return (
    <div className="card">
      <div className="container">
        <h4>
          <b>Account Component</b>
        </h4>
        <h3>Amount:${amount}</h3>
        <button onClick={() => dispatch(increment())}>Increment +</button>
        <button onClick={() => dispatch(decrement())}>Decrement -</button>
        <input type="text" onChange={(e) => setValue(+e.target.value)}></input>
        <button onClick={() => dispatch(incrementByAmount(value))}>
          Increment By {value} +
        </button>
      </div>
    </div>
  );
}

export default Account;

======================================================================================
We can create custom reducers as well 

3:30 



======================================================================================
if we have dependency in between reducers , then we use extrareducers 

like on incrementByAmount is >= 100 , we have to increment the points as well 

import { createSlice } from '@reduxjs/toolkit';
import { incrementByAmount } from './accountSlice';

const initialState = {
  points: 1,
};

export const bonusSlice = createSlice({
  name: 'bonus',
  initialState,
  reducers: {
    increment: (state) => {
      state.points += 1;
    },
  },
  extraReducers: (builder) => {
    builder.addCase(incrementByAmount, (state, action) => {
      if (action.payload >= 100) {
        state.points += 1;
      }
    });
  },
});

// Action creators are generated for each case reducer function
export const { increment } = bonusSlice.actions;

export default bonusSlice.reducer;
