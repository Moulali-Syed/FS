context API and useContext Hook:

To overcome prop drilling , we can use context api , we can pass the required value 
using useContext hook 


Create a folder , context inside src folder
create a context 
        ThemeContext.js 

import { createContext } from 'react';
const ThemeContext = createContext('dark');

export default ThemeContext;

-----
Lets use this in App.js level 

//import useContext and use the context 
import ThemeContext from './context/ThemeContext';
import { useContext, useReducer, useState } from 'react';

  const themeContext = useContext(ThemeContext);


import './App.css';
import { useContext, useReducer, useState } from 'react';
import videoDB from './data/data';
import AddVideo from './components/AddVideo';
import VideoList from './components/VideoList';
import ThemeContext from './context/ThemeContext';

function App() {
  const [editableVideo, setEditableVideo] = useState(null);

  function videoReducer(videos, action) {
    switch (action.type) {
      case 'ADD':
        return [
          ...videos,
          {
            id: videos.length + 1,
            ...action.payload,
          },
        ];
      case 'DELETE':
        return videos.filter((vid) => vid.id !== action.payload);
      case 'UPDATE':
        const index = videos.findIndex((vid) => vid.id === action.payload.id);
        const newVideos = [...videos];
        newVideos.splice(index, 1, action.payload);
        setEditableVideo(null);
        return newVideos;
      default:
        return videos;
    }
  }

  // const [videos, setVideos] = useState(videoDB);
  const [videos, dispatch] = useReducer(videoReducer, videoDB);

  function editVideo(id) {
    setEditableVideo(videos.find((vid) => vid.id === id));
  }

  const themeContext = useContext(ThemeContext);
  console.log({ themeContext });

  return (
    <>
      <div
        className={`App ${themeContext}`}
        onClick={() => console.log('parent triggered')}
      >
        <AddVideo dispatch={dispatch} editableVideo={editableVideo} />
        <VideoList videos={videos} dispatch={dispatch} editVideo={editVideo} />
      </div>
    </>
  );
}

export default App;


-----------------------------------------------------------------
We can change the context using a  state , we can wrap till where this context can be passed 

import './App.css';
import { useContext, useReducer, useState } from 'react';
import videoDB from './data/data';
import AddVideo from './components/AddVideo';
import VideoList from './components/VideoList';
import ThemeContext from './context/ThemeContext';

function App() {
  const [editableVideo, setEditableVideo] = useState(null);
  const [mode, setMode] = useState('darkMode');

  function videoReducer(videos, action) {
    switch (action.type) {
      case 'ADD':
        return [
          ...videos,
          {
            id: videos.length + 1,
            ...action.payload,
          },
        ];
      case 'DELETE':
        return videos.filter((vid) => vid.id !== action.payload);
      case 'UPDATE':
        const index = videos.findIndex((vid) => vid.id === action.payload.id);
        const newVideos = [...videos];
        newVideos.splice(index, 1, action.payload);
        setEditableVideo(null);
        return newVideos;
      default:
        return videos;
    }
  }

  // const [videos, setVideos] = useState(videoDB);
  const [videos, dispatch] = useReducer(videoReducer, videoDB);

  function editVideo(id) {
    setEditableVideo(videos.find((vid) => vid.id === id));
  }

  // const themeContext = useContext(ThemeContext);

  return (
    <>
      <ThemeContext.Provider value={mode}>
        <button
          onClick={() =>
            setMode((old) => (old === 'darkMode' ? 'lightMode' : 'darkMode'))
          }
        >
          ChangeTheme
        </button>
        <div
          className={`App ${mode}`}
          onClick={() => console.log('parent triggered')}
        >
          <AddVideo dispatch={dispatch} editableVideo={editableVideo} />
          <VideoList
            videos={videos}
            dispatch={dispatch}
            editVideo={editVideo}
          />
        </div>
      </ThemeContext.Provider>
    </>
  );
}

export default App;
