we can specify a discrminating member , based on it we can invoke
different functionality

the discriminating literal can be number , string or boolean

type Circle = {
  kind: 'circle';
  radius: number;
};
type Square = {
  kind: 'square';
  size: number;
};

type Rectangle = {
  kind: 'rectangle';
  width: number;
  height: number;
};

type Shape = Square | Rectangle | Circle;

function area(shape: Shape) {
  if (shape.kind === 'circle') {
    return Math.PI * shape.radius ** 2;
  }
  if (shape.kind === 'square') {
    return shape.size * shape.size;
  }
  if (shape.kind === 'rectangle') {
    return shape.width * shape.height;
  }
}

==============================================================================

discriminating property a boolean value:

type ValidationSuccess = {
  isValid: true;
  validatedValue: string;
};

type ValidationFailure = {
  isValid: false;
  errorReason: string;
};

type validationResult = ValidationSuccess | ValidationFailure;

function logResult(result: validationResult) {
  if (result.isValid) {
    console.log('Success Validated value: ', result.validatedValue);
  }
  if (result.isValid === false) {
    console.log('Failed Validation value: ', result.errorReason);
  }
}
