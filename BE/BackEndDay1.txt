FrontEnd - the page we see in the browser - visual part
Backend - linked to Business Logic , behaviour , functionality is linked to BackEnd


When we click on link - a http(protocol) call happens 

Client(Request) - Server (Response)

When we search - Domain Name Search happens through Internet Service Provider and we get
a IP address - then connection happens through Transfer Communication Protocol and we get 
response from Server 

We have majorly 4 types of requests
    GET POST PUT DELETE

    GET - retrieve data 
    PUT - update data
    POST - create data
    DELETE - delete data 

What is meant by Idempotent?
It essentially means that the result of a successfully performed request
 is independent of the number of times it is executed. For example, 
 in arithmetic, adding zero to a number is idempotent operation. 
 POST is NOT idempotent. GET, PUT, DELETE, HEAD, OPTIONS and TRACE are idempotent

Lets create a server using Express Js:
Create a folder - go to folder path in terminal
Initialize node app --->   npm init -y

Install express --->  npm i express 
Create a file ------>  server.js 

----------------------------------------------------------------------
// 1.Create a folder
//2.Move into that folder
// 3. npm init -y
// 4.open folder using vscode
// 5.npm i express
// 6.create a server.js

// Server Instantiated
const express = require('express');
const app = express();

//used to parse req.body in express - used in case of PUT and POST
const bodyParser = require('body-parser');

//specifically parse json data and add it to the request.body object
app.use(bodyParser.json());

//activate the server on 3000 port
app.listen(3000, () => {
  console.log('server started at port 3000');
});

// Creating a Routes
app.get('/', (req, res) => {
  res.send('hello from server');
});

app.post('/api/cars', (req, res) => {
  const { name, brand } = req.body;
  console.log(name);
  console.log(brand);
  res.send('Car submitted successfully');
});

----------------------------------------------------------------------

MongoDB is a NoSQL database
we store data in form documents , key-value pairs , graph etc 

MongoDB setup

CRUD - Create Read Update Delete 


Download MongoDB
Download MongoDB Compass 

in cmd -- mongosh

show dbs   //show all available databases


We can do CRUD operations from MongoDBCompass 

----------------------------------------------------------------------

Connecting MongoDB to Express - we use mongoose (monogoose can also be called ODM model - Object Data Modelling)

npm i mongoose 


//Lets connect mongoDB 

const mongoose = require('mongoose');
mongoose
  .connect('mongodb://localhost:27017/myDatabase', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log('Connection Successful');
  })
  .catch((err) => {
    console.log('Received an error');
  });
