Go to Cloudinary website --> Media Library --> Folders ---> create a new folder 

Lets see imageUpload()
            we fetch data 
            validate whether the file type is supported 
            if valid upload to cloudinary 
            save in DB
            send success response 


------------------------------------------------------------------------------------------------------------------------
upload image to cloudinary 

const cloudinary = require('cloudinary').v2;

function isFileTypeSupported(type, supportedTypes) {
  return supportedTypes.includes(type);
}

async function uploadFileToCloudinary(file, folder) {
  const options = { folder };
  return await cloudinary.uploader.upload(file.tempFilePath, options);
}

exports.imageUpload = async (req, res) => {
  try {
    const { name, tags, email } = req.body;
    console.log(name, tags, email);

    const file = req.files.imageFile;
    console.log(file);

    //validate file type
    const supportedTypes = ['jpg', 'jpeg', 'png'];
    const fileType = file.name.split('.')[1].toLowerCase();

    if (!isFileTypeSupported(fileType, supportedTypes)) {
      return res.status(400).json({
        success: false,
        msg: 'File Type not supported',
      });
    }

    //file format is supported , so upload it
    //we are passing file and the folder name we created in cloudinary
    const response = await uploadFileToCloudinary(file, 'learncode');
    console.log(response);

    //save entry to DB
    const fileData = await File.create({
      name,
      email,
      tags,
      imageUrl: response.secure_url,
    });

    return res.json({
      success: true,
      imageUrl: response.secure_url,
      message: 'Image Successfully uploaded',
    });
  } catch (err) {
    console.error(err);
    return res.json({
      success: false,
      msg: err.message,
    });
  }
};


---- in index.js add the parameters for fileupload ----
const fileupload = require('express-fileupload');
app.use(
  fileupload({
    useTempFiles: true,
    tempFileDir: '/tmp/',
  })
);

---- in routes/FileUpload.js add the path ----
router.post('/imageUpload', imageUpload);

------------------------------------------------------------------------------------------------------------------------
videoUpload 
      same as imageUpload 
            data fetch 
            validation for file types and limit the size
            upload to cloudinary
            db save 
            success response 


//make sure to set the resource_type to auto 
async function uploadFileToCloudinary(file, folder) {
  const options = { folder };
  console.log(file.tempFilePath);
  options.resource_type = 'auto';
  return await cloudinary.uploader.upload(file.tempFilePath, options);
}

//controller for video upload 
//video upload
exports.videoUpload = async (req, res) => {
  try {
    const { name, tags, email } = req.body;
    console.log(name, tags, email);

    const file = req.files.videoFile;

    //validation
    const supportedTypes = ['mp4', 'mov'];
    const fileType = file.name.split('.')[1].toLowerCase();
    console.log('File Type ', fileType);

    //Add a upper limit of 5MB for video file
    if (!isFileTypeSupported(fileType, supportedTypes)) {
      return res.status(400).json({
        success: false,
        msg: 'File Format not supported',
      });
    }

    console.log('Uploading file');
    const response = await uploadFileToCloudinary(file, learncode);
    console.log(response);

    //db entry
    const fileData = await File.create({
      name,
      tags,
      email,
      imageUrl: response.secure_url,
    });

    return res.status(200).json({
      success: true,
      imageUrl: response.secure_url,
      message: 'Image Successfully uploaded',
    });
  } catch (err) {
    return res.status(400).json({
      success: false,
      data: err.message,
      msg: 'Something went wrong',
    });
  }
};

//Add the route inside routes/FileUpload.js 
router.post('/videoUplaod', videoUpload);

--------------------------------------------------------------------------------------------
Image Size Reducer (we used quality attribute , try to do by changing height attribute)

async function uploadFileToCloudinary(file, folder, quality) {
  const options = { folder };
  console.log(file.tempFilePath);
  if (quality) {
    options.quality = quality;
  }
  options.resource_type = 'auto';
  return await cloudinary.uploader.upload(file.tempFilePath, options);
}



//Image reducer upload
exports.imageReducerUpload = async (req, res) => {
  try {
    //data fetch
    const { name, email, tags } = req.body;
    console.log(name, email, tags);

    const file = req.files.imageFile;
    console.log(file);

    //validation
    const supportedTypes = ['jpg', 'jpeg', 'png'];
    const fileType = file.name.split('.')[1].toLowerCase();
    console.log('File Type ', fileType);

    //add a upper limit of file size 5MB
    if (!isFileTypeSupported(fileType, supportedTypes)) {
      return res.status(400).json({
        success: false,
        message: 'File Format not supported',
      });
    }

    console.log('Uploading File');
    //compress the file , for this we send a parameter that specifies the qaulity - here 90
    const response = await uploadFileToCloudinary(file, 'learncode', 90);
    console.log(response);

    //db entry
    const fileData = await File.create({
      name,
      tags,
      email,
      imageUrl: response.secure_url,
    });

    return res.status(200).json({
      success: true,
      imageUrl: response.secure_url,
      message: 'Image Successfully uploaded',
    });
  } catch (err) {
    return res.status(400).json({
      success: false,
      data: err.message,
      msg: 'Something went wrong',
    });
  }
};


//Add the Route 
router.post('/imageReducerUpload', imageReducerUpload);

=======================================================================================
What is markdown formatting?

it is a lightweight markup language used to format and structure text 
popular for formatting text based content 

to create heading 
# This is heading 

create a bulleted list (astrisk followed by space)
* Item1 * Item2 * Item3 

make text bold 
**text here**

make text italic
*text here*

Supported by many platforms like github, stackOverflow..