Javascript Introduction :
Javascript is a programming language is one of core technologies of web
Js can update and change both html and css
Js can calculate , manipulate and validate data

#Add Js in html file
We can add Javascript inside html file using script tag
<script>
        alert("hello world");
</script>

Js is an interpreted language , no need to download special compilers for Javascript to run

#Add seperate script.js file
Instead we can add separate js file
<script src="./script.js"></script>

#Add variables
let x  = 10;
alert(x);
we can change the value when declared using let , but we cannot redecalre as let x = 100;

const x = 120;
console.log(x);
we cannot change the value of variable declared 

const PI = 3.14;
console.log(PI);

variable name should start with  _ $ , letter but not number
variable are case sensitive means 'a' is different from 'A'
variable names cannot contain spaces

var x = 10;
we can redeclare and also change its value 

#strict mode
'use strict'
in strict mode , we cannot declare variable like x= 10, we must specify either of let,var , const

if we try to print a variable which is not declared , using strict mode it throws an error

# variable types in Javascript

typeof ---> gives the type of the variable

let x = 'apple';
console.log(typeof x); //string

we have number , string , boolean , undefined , null , Symbol , BigInt Primitive datatypes
Object, Array - Reference Datatypes 

typeof null --> object(it is a historical js mistake , will not be corrected)


true - denotes 1 
false denotes 0 


console.log('33' + 12 + true); //3312true
console.log(33 + true); //34
console.log(33 + false); //33
console.log('Apple' + ' ' + 'Shimla'); //Apple Shimla
// Template literals
console.log(`Apple Shimla`);
let name = 'Apple';
console.log(`hey ${name} , how r u doing`);

------------------------------------------------------------------------------------
Type conversion and String Methods in Javascript:

#// Type conversion
let x = '456';
console.log(typeof Number(x)); //number

let y = 123;
console.log(typeof String(y)); //string
console.log(typeof y.toString()); //string

let z = true;
console.log(typeof Number(z)); //number
console.log(Number(z)); //1


#//String Methods
let s = 'my name is apple';
console.log(s[0]); //m
console.log(s.charAt(0)); //m
console.log(s.indexOf('n')); //3
console.log(s.lastIndexOf('am')); //4

console.log(s.startsWith('m')); //true
console.log(s.endsWith('le')); //true
console.log(s.includes('z')); //false

console.log(s.substring(2, 9)); // name i 2-startIndex , 9 - endIndex(not included)
console.log(s.substr(1, 4)); //y na 1-startIndex , 4 - numberof characters
console.log(s.slice(2, 9)); // name i 2-startIndex , 9 - endIndex(not included)

console.log(s.split(' ')); //[ 'my', 'name', 'is', 'apple' ]
console.log(s.replace('is', 'was')); //my name was apple

console.log(s.length); //16

console.log(s.toLowerCase()); //my name is apple
console.log(s.toUpperCase()); //MY NAME IS APPLE

#basic dom manipulation
    <h1 id="myHeading">name</h1>

const heading = document.getElementById('myHeading');
console.log(heading);
heading.innerText = 'hi there';
heading.style.color = 'red';
heading.style.backgroundColor = 'pink';

------------------------------------------------------------------------------------

if else , swicth , loops 

//operators
//+ ,- , /, * , % - arithmetic operators
// comparision operators
//  == vs === ,  > ,< , <= , >= , != , !==

//if else
let iceCream = +prompt('Enter a number');
if (iceCream === 10) {
  console.log('IceCream is cool');
} else if (iceCream === 30) {
  console.log('IceCream is too cool');
} else {
  console.log('Not cool');
}


let iceCream = +prompt('Enter a number');

//switch
switch (iceCream) {
  case 10:
    console.log('cool');
    break;
  case 20:
    console.log('very cool');
    break;
  case 30:
    console.log('too cool');
    break;
  default:
    console.log('no icecream');
}

//ternary operator
let input = +prompt('enter a number');
let a = 10 > input ? 'hi' : 'bye';

console.log(a);

//loops

for (let i = 0; i < 10; i++) {
  console.log(Math.floor(Math.random() * i));
}

let j = 1;
while (j <= 10) {
  console.log(j);
  j++;
}

let k = 10;
do {
  console.log(k);
  k--;
} while (k > 0);

let arr = [1, 2, 3, 4];
for (let i in arr) {
  console.log(arr[i], i);
}

for (let i of arr) {
  console.log(i);
}

arr.forEach((i) => console.log(i));

------------------------------------------------------------------------------------
Arrays and Objects:

// Arrays - we can store multiple values inside an array , we can store value of any type,multiple types
let arr = [11, 12, 13, 14];
console.log(arr);
console.log(arr[0]); //11
console.log(arr.length); //4
arr[5] = 17;
console.log(arr); //[ 11, 12, 13, 14, <1 empty item>, 17 ]

//empty an array
arr.length = 0;
console.log(arr); //[]

//creating array using constructor function
let arr2 = new Array(4);
console.log(arr2); //[ <4 empty items> ]

//Array Methods
let array1 = [1];
console.log(array1.push(12)); //gives the new length of array - 2
console.log(array1.pop()); //gives the removed element from array from last - 12

console.log(array1.unshift(10)); //adds element at begining and returns new length -2
console.log(array1.shift()); //removes an element from the starting of array - 10

array1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
//mutates the original array
console.log(array1.splice(3, 2)); //gives the deleted elements from array as an array - [4,5]
console.log(array1); //[1,2,3,6,7,8,9]
console.log(array1.splice(3, 0, 10));
console.log(array1); //[1,2,3,10,6,7,8,9]

//mutates original array
console.log(array1.reverse()); //[9,8,7,6,10,3,2,1]

console.log(array1.slice(1, 3)); //[8,7] - slice doesnot change original array
console.log(array1);

console.log(array1.includes(10)); //true

let array2 = [];
for (let i = 0; i < 100; i++) {
  array2[i] = i + 1;
}
console.log(array2);


Object:

// Objects
const myObj = {
  name: 'Apple',
  surName: 'Shimla',
  income: 200000000,
  male: true,
};

console.log(myObj);

------------------------------------------------------------------------------------

Functions in javascript:

to reuse code - we use Functions

in js we have
  function declaration
  function expression
  arrow Functions


function declaration:

function sayHi() {
  console.log('Hi There');
}

sayHi(); //Hi There

//we pass parameters when declaring a function
function sum(a, b, c) {
  return a + b + c;
}
console.log(sum(2, 3, 4)); //9 -  we pass arguments when calling function


//we can give default parameters 
function add(a=1,b=0){
  return a+b;
}

//function expression
let add = function (a, b) {
  return a + b;
};
console.log(add(1, 2));


//Add elements in array
function addArray(arr) {
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }
  console.log(sum);
}

addArray([1, 2, 3, 4]);


Scoping:
let and const - are block scoped
var  - is function scope 